Problem:

-Player needs to have collisions with tiles
-A seperate collision object for each tile is hugely innefficient and causes < 1 fps


Approach:

-Search google, unity docs, stack overflow/exchange for solutions
-Found multiple options:

	-Only add collider objects for tiles with adjacent empty space
	Pros:
		-Reduced amount of collision obejcts => raises performance
		-Simple to implement
		-No reduction on gameplay quality
	Cons:
		-Not scalable - Doesn't save much performace, especially once caves etc are implemented
		-unelegant solution

	-Sum the collision objects together into one overall collision object
	Pros:
		-Significantly reduced amount of collision obejcts => significantly raises performance
		-Elegant solution
		-Scalable
		-No reduction on gameplay quality
	Cons:
		-Requires extremely complex algorithm

Soltion:

-Option 2 selected
-No built in unity methods to sum collision objects (there really should be)
-Found C# library 'Clipper' that takes a list of a list of vertices (a list of shapes) which it simplifies into 1 list of vertices (into one big shape)
http://www.angusj.com/delphi/clipper.php https://gamedev.stackexchange.com/questions/125927/how-do-i-merge-colliders-in-a-tile-based-game
-Can subtract areas from shapes in addition to adding, meaning when tiles are updated the whole algorithm doesn't need to be run again, just one section
-efficient; doesn't take very long at all